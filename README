Maven Android SDK Deployer

The Maven Android SDK Deployer is a helper maven project that can be used to install the libraries
necessary to build Android applications with Maven and the Maven Android Plugin. These are mostly android.jar and
maps.jar at the moment although the setup can be expanded easily.

How to Use
----------

- download the Android SDK r4 from http://developer.android.com/sdk/index.html following the instructions there

- edit the property android.sdk.path to contain the absolute folder you just installed the SDK to

- run the command "mvn install" in the root folder of this project (same as README you are just reading)

- as a result you should find the android.jar and maps.jar in various versions in your users local repository
  (~/.m2/repository/android and ~/.m2/repository/com/google/android/maps) and you can therefore use the following
  dependencies in your project

  for the core platforms

          <dependency>
              <groupId>android</groupId>
              <artifactId>android</artifactId>
              <version>1.1_r1</version>
              <scope>provided</scope>
          </dependency>

          <dependency>
              <groupId>android</groupId>
              <artifactId>android</artifactId>
              <version>1.5_r3</version>
              <scope>provided</scope>
          </dependency>

          <dependency>
              <groupId>android</groupId>
              <artifactId>android</artifactId>
              <version>1.6_r2</version>
              <scope>provided</scope>
          </dependency>

          <dependency>
              <groupId>android</groupId>
              <artifactId>android</artifactId>
              <version>2.0_r1</version>
              <scope>provided</scope>
          </dependency>

          <dependency>
              <groupId>android</groupId>
              <artifactId>android</artifactId>
              <version>2.0.1_r1</version>
              <scope>provided</scope>
          </dependency>

  for the maps add ons

          <dependency>
              <groupId>com.google.android.maps</groupId>
              <artifactId>maps</artifactId>
              <version>3_r3</version>
              <scope>provided</scope>
          </dependency>

          <dependency>
              <groupId>com.google.android.maps</groupId>
              <artifactId>maps</artifactId>
              <version>4_r1</version>
              <scope>provided</scope>
          </dependency>

          <dependency>
              <groupId>com.google.android.maps</groupId>
              <artifactId>maps</artifactId>
              <version>5_r1</version>
              <scope>provided</scope>
          </dependency>

          <dependency>
              <groupId>com.google.android.maps</groupId>
              <artifactId>maps</artifactId>
              <version>6_r1</version>
              <scope>provided</scope>
          </dependency>

How To Use for Deploying Onto Remote Server
-------------------------------------------

The above deployment works fine for one machine, but what if you need to supply a whole team of developers and a cluster
of build machines with the artifacts. Well, you follow these steps:

- as a condition you need to have a repository server used by all those machines and the following process will deploy to
this server, which will in turn provide the artifacts to all the machines.

- edit the repo.url property in the pom.xml to point to the repository you want to publish to and then add a server with
the credentials to your settings.xml.

E.g.
<settings>
    <servers>
        <server>
            <id>android.repo</id>
            <username>your username</username>
            <password>your password</password>
        </server>
    </servers>
</settings>

- run the command "mvn deploy" in the root folder of this project (same as README you are just reading)

- as a result you should find the artifact in the repository of your remote server

For more information about this stuff look at the documentation for the maven-deploy-plugin.


Potential todo items
--------------------

- add automatic download and install of SDK into .m2/repository somewhere, could then use dependency plugin to
  pull into target and use from there, problem SDK license agreement 

- add custom pom files for install/deploy that eg. define dependency from maps to android jar

- maybe some sort of reporting of errors, failures and success as well

